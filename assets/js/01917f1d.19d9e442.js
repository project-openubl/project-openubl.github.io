"use strict";(self.webpackChunkproject_openubl=self.webpackChunkproject_openubl||[]).push([[2980],{15680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>m});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),g=r,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||o;return a?t.createElement(m,l(l({ref:n},p),{},{components:a})):t.createElement(m,l({ref:n},p))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},89509:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=a(58168),r=(a(96540),a(15680));const o={title:"Instalaci\xf3n"},l=void 0,i={unversionedId:"xsender/installation",id:"xsender/installation",title:"Instalaci\xf3n",description:"XBuilder puede ser usado y descargado desde el repositorio central de Maven. Las versiones pueden ser consultadas en:",source:"@site/docs/05-xsender/02-installation.md",sourceDirName:"05-xsender",slug:"/xsender/installation",permalink:"/docs/xsender/installation",draft:!1,editUrl:"https://github.com/project-openubl/website/tree/master/docs/05-xsender/02-installation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Instalaci\xf3n"},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n",permalink:"/docs/xsender"},next:{title:"Enviar XML",permalink:"/docs/xsender/send-xml"}},s={},c=[{value:"Standalone",id:"standalone",level:2},{value:"Inicializa CamelContext y utilizalo con XSender",id:"inicializa-camelcontext-y-utilizalo-con-xsender",level:3},{value:"Quarkus",id:"quarkus",level:2},{value:"Injecta CamelContext y utilizalo con XSender",id:"injecta-camelcontext-y-utilizalo-con-xsender",level:3},{value:"Spring Boot",id:"spring-boot",level:2},{value:"Configura la clase principal de Spring Boot",id:"configura-la-clase-principal-de-spring-boot",level:3},{value:"Injecta CamelContext y utilizalo con XSender",id:"injecta-camelcontext-y-utilizalo-con-xsender-1",level:3},{value:"Gradle",id:"gradle",level:2},{value:"Configuraci\xf3n extra",id:"configuraci\xf3n-extra",level:3}],p={toc:c},d="wrapper";function u(e){let{components:n,...a}=e;return(0,r.yg)(d,(0,t.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"XBuilder puede ser usado y descargado desde el repositorio central de Maven. Las versiones pueden ser consultadas en:"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://central.sonatype.com/artifact/io.github.project-openubl/xsender"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/maven-central/v/io.github.project-openubl/xsender",alt:"Maven Central"}))),(0,r.yg)("h2",{id:"standalone"},"Standalone"),(0,r.yg)("p",null,"Ideal para aplicaciones de escritorio o aplicaciones desplegadas en servidores como Tomcat."),(0,r.yg)("p",null,"Si usas Maven: en tu archivo ",(0,r.yg)("inlineCode",{parentName:"p"},"pom.xml")," agrega:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>io.github.project-openubl</groupId>\n    <artifactId>xsender</artifactId>\n    <version>${xsender.version}</version>\n</dependency>\n")),(0,r.yg)("h3",{id:"inicializa-camelcontext-y-utilizalo-con-xsender"},"Inicializa CamelContext y utilizalo con XSender"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class XSenderController {\n\n    public String test() {\n        CamelContext camelContext = StandaloneCamel.getInstance()\n            .getMainCamel()\n            .getCamelContext();\n        \n        SunatResponse sendFileSunatResponse = camelContext.createProducerTemplate()\n                .requestBodyAndHeaders(\n                        Constants.XSENDER_BILL_SERVICE_URI,\n                        camelData.getBody(),\n                        camelData.getHeaders(),\n                        SunatResponse.class\n                );\n    }\n\n")),(0,r.yg)("h2",{id:"quarkus"},"Quarkus"),(0,r.yg)("p",null,"Para aplicaciones hechas en ",(0,r.yg)("a",{parentName:"p",href:"https://quay.io/"},"Quarkus")),(0,r.yg)("p",null,"Si usas Maven: en tu archivo ",(0,r.yg)("inlineCode",{parentName:"p"},"pom.xml")," agrega:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>io.github.project-openubl</groupId>\n    <artifactId>quarkus-xsender</artifactId>\n    <version>${xsender.version}</version>\n</dependency>\n")),(0,r.yg)("h3",{id:"injecta-camelcontext-y-utilizalo-con-xsender"},"Injecta CamelContext y utilizalo con XSender"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"@ApplicationScoped\npublic class XSenderController {\n\n    @Inject\n    private CamelContext camelContext;\n\n    public String test() {\n        SunatResponse sendFileSunatResponse = camelContext.createProducerTemplate()\n                .requestBodyAndHeaders(\n                        Constants.XSENDER_BILL_SERVICE_URI,\n                        camelData.getBody(),\n                        camelData.getHeaders(),\n                        SunatResponse.class\n                );\n    }\n")),(0,r.yg)("h2",{id:"spring-boot"},"Spring Boot"),(0,r.yg)("p",null,"Para aplicaciones hechas en ",(0,r.yg)("a",{parentName:"p",href:"https://spring.io/"},"Spring Boot")),(0,r.yg)("p",null,"Si usas Maven: en tu archivo ",(0,r.yg)("inlineCode",{parentName:"p"},"pom.xml")," agrega:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>io.github.project-openubl</groupId>\n    <artifactId>spring-boot-xsender</artifactId>\n    <version>${xsender.version}</version>\n</dependency>\n")),(0,r.yg)("h3",{id:"configura-la-clase-principal-de-spring-boot"},"Configura la clase principal de Spring Boot"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'@ComponentScan\n@ComponentScan("io.github.project.openubl.spring.xsender.runtime")\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n')),(0,r.yg)("h3",{id:"injecta-camelcontext-y-utilizalo-con-xsender-1"},"Injecta CamelContext y utilizalo con XSender"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"public class XSenderController {\n\n    @Autowired\n    private CamelContext camelContext;\n\n    public String test() {\n        SunatResponse sendFileSunatResponse = camelContext.createProducerTemplate()\n                .requestBodyAndHeaders(\n                        Constants.XSENDER_BILL_SERVICE_URI,\n                        camelData.getBody(),\n                        camelData.getHeaders(),\n                        SunatResponse.class\n                );\n    }\n")),(0,r.yg)("h2",{id:"gradle"},"Gradle"),(0,r.yg)("p",null,"Si usas Gradle: en tu archivo ",(0,r.yg)("inlineCode",{parentName:"p"},"build.gradle")," agrega:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},"compile group: 'io.github.project-openubl', name: 'xsender', version: 'VERSION'\n")),(0,r.yg)("h3",{id:"configuraci\xf3n-extra"},"Configuraci\xf3n extra"),(0,r.yg)("p",null,"XSender usa Apache CXF y Gradle no es cap\xe1z de descargar algunas dependencies por lo tanto es necesario agregar dependencias manualmente.\nPara mayor informaci\xf3n lee ",(0,r.yg)("a",{parentName:"p",href:"https://discuss.gradle.org/t/apache-cxf-transitive-dependencies-are-missing-many-dependencies-when-coming-from-maven-to-gradle/42333/2"},"Apache CXF missing dependencies when comming from Gradle")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'runtimeOnly("jakarta.xml.soap:jakarta.xml.soap-api:1.4.2")\nruntimeOnly("jakarta.xml.ws:jakarta.xml.ws-api:2.3.3")\nruntimeOnly("jakarta.annotation:jakarta.annotation-api:1.3.5")\n')))}u.isMDXComponent=!0}}]);